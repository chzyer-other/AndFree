{"tagline":"An Android Framework to Free Your Hand（orm, widget inside）［一个安卓通用框架， 用于解放你的双手］","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Andfree","body":"# AndFree  \r\n# 中文说明\r\n前言\r\n---\r\nandfree是我历经1年的android开发, 最后整理出来的, 其前身未成形时曾用于两个项目, 可能由于LZ在接触Android前较为熟悉python, php, js, 所以可能andfree中会有一些上述语言的影子, 希望Andfree能够给各位开发者带来一些便利~\r\n\r\n使用\r\n---\r\nAndFree是一套代码, 只要把AndFree放到项目目录里面并且设置为源文件夹即可使用\r\n\r\n协议\r\n---\r\n采用最自由的MIT开源协议\r\n\r\n特性\r\n---\r\n   - 提供完整的数据库类封装\r\n   - 提供常用的辅助函数封装\r\n   - 基于Activity给其添加更多特性\r\n   - Class-XML一对一模式提供控件封装\r\n   - 统一全局, 唯一一个数据集类(Line), 支持JSON/[MsgPack](http://msgpack.org)的输入和输出, 数据库输出的格式也是Line (内置[msgpack-for-android](https://github.com/chzyer/msgpack-for-android))\r\n   - Activity默认提供Activity Result路由, 不用将全部代码集中于Activity而是可以分散到子类中\r\n   - 系统控件封装, 继承于类IWidget, 针对一些常用的控件比如button, imageview, textview, edittext, linearlayout, relativelayout进行一些封装\r\n   - 统一ContentProvider和数据库接口\r\n   - 内置动态配置, 主要是用于保存设置类的数据(实质是使用数据库内建一张config的表, 并做一些封装), 在我写的默认控件中也对动态配置信息进行支持, 比如给一个开关指定一个配置字段, 开关会根据用户的操作自动操作数据库 :), 自己使用的话, 语法类似于下面\r\n   \r\n   \t\tSystems.showGuide.set(true);\r\n   \t\tif (Systems.showGuide.bool()){\r\n   \t\t\t// TODO show guide layout\r\n   \t\t}\r\n   - 还有静态的配置类, 并可设置依赖关系, 比如说我有两个模块 A, B, 两个模块都有一个Log功能, 然后我可以通过静态配置来决定这两个log功能执不执行. Conf.LOG_A.和Conf.LOG_B\r\n   \t\r\n   \t\t//_f可以理解为一个生成DebugField的函数.(代码里面真的是_f, 哈哈贪方便)\r\n   \t\tpublic static DebugField LOG_A = _f(true);\r\n   \t\tpublic static DebugField LOG_B = _f(true);\r\n   \t然后我还想要一个全局的LOG开关, 一关闭这个的话, 全局的LOG都不显示, 这个时候就需要依赖关系\r\n   \t\r\n   \t\tpublic static DebugField LOG = _f(true);\r\n   \t\t//LOG_A和LOG_B要添加依赖关系\r\n   \t\tpublic static DebugField LOG_A = _f(true, LOG);\r\n   \t\tpublic static DebugField LOG_B = _f(true, LOG);\r\n   \t这样, 一旦依赖的配置是False, LOG_A和LOG_B将始终被解析为false, 当LOG为true是, 其他两个依赖他的debug才起作用\r\n   \t\t\r\n   - 代码定义数据库结构, 好处是程序能根据代码自动更新数据库结构, 对, AndFree会自动更新数据库结构(前提是你要修改数据库的版本号AndFree才会检查)\r\n   - 特性大概就这么多, 目的只有一个, 让安卓的开发更加快速, 下面还会有详细的使用说明\r\n\r\n其他功能?\r\n-----\r\n慢慢来吧\r\n\r\n#English Documents\r\nThe Android Framework provides some helper functions, some simple widget items, database orm and a layout framework.\r\n\r\nHow to Use\r\n---\r\n\r\n1. In eclipse, import the whole Andfree project and set it as a library.\r\n2. Create a new project, and go into its ``properties -> android``, add library \"AndFree\".\r\n\r\nLayout\r\n---\r\nIt's possable to build a android project without any layout designed. It also provides some widget like combo, switch button, etc. that you can set up then by code easily.\r\n\r\nDatabase\r\n---\r\nAndfree provides a database orm. You can define your database structure with code like follows:\r\n\r\n\tpublic class dbcore extends baseDBcore{\r\n\t\tpublic static class popup extends BaseDBcore{\r\n\t\t\tpublic final static dbField _id = dbField.primaryInt(\"_id\");\r\n\t\t\tpublic final static dbField type = dbField.integer(\"type\", 0); //0:contact; 1:keyword\r\n\t\t\tpublic final static dbField data = dbField.text(\"data\");//contact_id || keyword\r\n\t\t\tpublic final static dbField music = dbField.text(\"music\");//null: default; URI\r\n\t\t}\r\n\t}\r\n\r\nFor get the result :\r\n\r\n\tLine data = new dbcore.popup()\r\n\t\t.select(dbcore.pupop.data)\r\n\t\t.where(dbcore.popup.type.v(1))\r\n\t\t.result();\r\n\t// Line is a multiple functions JSON data collector in Andfree\r\n\r\n\r\nAs an alternative, you can get the same results by writing follows:\r\n\t\r\n\tLine data = new dbcore.popup(){{\r\n\t\t//you may set the target table, maybe it will no need this in the future(I can't fix it in a while)\r\n\t\tsetDBParse(dbcore.popup.class);\r\n\t\t\r\n\t\tselect(data);\r\n\t\twhere(type.v(1));\r\n\t}}.result();\r\n\r\n``It means \"SELECT data FROM popup WHERE type = 1\"``\r\nData collector - Line\r\n---\r\nIn android, there is many array type to choise. In andfree, there is only one, \"Line\".\r\n\r\n1. Line support json and merge \"JSONObject\" and \"JSONArray\" and then no need to write try{}catch(){} \r\n\r\n\t\t//object\r\n\t\tLine data = new Line();\r\n\t\tdata.put(\"key1\", \"value1\");\r\n\t\tdata.put(\"key2\", \"value2\");\r\n\t\t\r\n\t\t//array\r\n\t\tLine data = new Line();\r\n\t\tdata.put(new Line().put(\"key1\", \"value1\"));\r\n\t\tdata.put(new Line().put(\"key2\", \"value2\"));\r\n\t\t\r\n2. Line also can received the database data. It's easy way to foreach then.\r\n\r\n\t\t//only support for array(list), object(dict) is not supported\r\n\t\tLine datas = new dbcore.popup().result();\r\n\t\tfor (Line item: datas){\r\n\t\t\tLog.i('test', item.toString());\r\n\t\t}\r\n3. Line support insert/update data to database using `save()`\r\n\t\r\n\t\t//insert\r\n\t\tLine data = new Line(dbcore.popup.class){{\r\n\t\t\tnew dbcore.popup(){{\r\n\t\t\t\tput(type, 1);\r\n\t\t\t\tput(data, \"hello\");\r\n\t\t\t\tput(music, \"media://xxx\");\r\n\t\t\t}}\r\n\t\t\tsave();\r\n\t\t}};\r\n\t\t\r\n\t\t//update\r\n\t\tLine data = new dbcore.popup().where(dbcore.popup._id.v(1)).get()\r\n\t\tdata.put(dbcore.popup.type, 2);\r\n\t\tdata.save();\r\n\r\n> Line is a json Library written by myself, so it may a little low performance than the \"JSONObject\" and \"JSONArray\". But it's dosen't matter if the count of data is small than 500.At usually, the count may in the range of 10-20.","google":""}